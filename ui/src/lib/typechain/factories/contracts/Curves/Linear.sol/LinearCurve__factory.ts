/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BigNumberish,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type {
  LinearCurve,
  LinearCurveInterface,
} from "../../../../contracts/Curves/Linear.sol/LinearCurve";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "steepness",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "currentSupply",
        type: "uint256",
      },
    ],
    name: "priceForSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161014938038061014983398101604081905261002f91610037565b600055610050565b60006020828403121561004957600080fd5b5051919050565b60eb8061005e6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063f998821314602d575b600080fd5b603c60383660046060565b604e565b60405190815260200160405180910390f35b60008054605a90836078565b92915050565b600060208284031215607157600080fd5b5035919050565b8082028115828204841417605a577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fdfea2646970667358221220183abb402af025b6cee30666c7b8abe32568f1382d57693a55d7a7a481d1cb6164736f6c63430008170033";

type LinearCurveConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LinearCurveConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class LinearCurve__factory extends ContractFactory {
  constructor(...args: LinearCurveConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    steepness: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(steepness, overrides || {});
  }
  override deploy(
    steepness: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(steepness, overrides || {}) as Promise<
      LinearCurve & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): LinearCurve__factory {
    return super.connect(runner) as LinearCurve__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LinearCurveInterface {
    return new Interface(_abi) as LinearCurveInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): LinearCurve {
    return new Contract(address, _abi, runner) as unknown as LinearCurve;
  }
}
