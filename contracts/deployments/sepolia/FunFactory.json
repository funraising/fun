{
  "address": "0x5B79C3970886A1F71b82A80c75BE1dD8cDb7BD96",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "raisinToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "imageURI",
          "type": "string"
        },
        {
          "internalType": "contract IERC20",
          "name": "raisinToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "endsAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxSupply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "raisinTarget",
          "type": "uint256"
        }
      ],
      "name": "createFun",
      "outputs": [
        {
          "internalType": "contract FunFun",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "funder",
          "type": "address"
        }
      ],
      "name": "getFunByMan",
      "outputs": [
        {
          "internalType": "contract FunFun[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xe5d98551a79aa2067f502b3dd22053a30bd3537b9d320caf716823cd56ce4fde",
  "receipt": {
    "to": null,
    "from": "0x45418b3cc0CF56847A8A3C3004961c572E259142",
    "contractAddress": "0x5B79C3970886A1F71b82A80c75BE1dD8cDb7BD96",
    "transactionIndex": 72,
    "gasUsed": "2313317",
    "logsBloom": "0x
    "blockHash": "0xe723f2cbec4393c8ea8b73f736f878d4da96c00de959ce6bcba92456cfdb3fdf",
    "transactionHash": "0xe5d98551a79aa2067f502b3dd22053a30bd3537b9d320caf716823cd56ce4fde",
    "logs": [],
    "blockNumber": 6020326,
    "cumulativeGasUsed": "8096854",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x702c959708bc19d7c506723A78077b102094CC65"
  ],
  "numDeployments": 1,
  "solcInputHash": "d0f2adfb6fd74dc1ecb4a7d09cf93727",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"raisinToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"imageURI\",\"type\":\"string\"},{\"internalType\":\"contract IERC20\",\"name\":\"raisinToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"endsAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"raisinTarget\",\"type\":\"uint256\"}],\"name\":\"createFun\",\"outputs\":[{\"internalType\":\"contract FunFun\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getFunByMan\",\"outputs\":[{\"internalType\":\"contract FunFun[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FunFactory.sol\":\"FunFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/Curves/Polynomial.sol\":{\"content\":\"contract PolynomialCurve {\\n    uint256 private _steepness;\\n\\n    constructor(uint256 steepness){\\n    _steepness = steepness;\\n    }\\n\\n    function priceForSupply(uint256 currentSupply) public view returns(uint256) {\\n        return currentSupply^2 * _steepness;\\n    }\\n\\n}\\n\",\"keccak256\":\"0xf36674a332f72544e0c671bc5163a0fd131fa5ef8a1d26ebdf7282bb7ecd4a58\"},\"contracts/FunFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./FunFun.sol\\\";\\n\\ncontract FunFactory {\\n    IERC20 private _raisinToken;\\n    mapping(address => FunFun[]) private _funByMan;\\n\\n    constructor (\\n        IERC20 raisinToken\\n    ) {\\n        _raisinToken = raisinToken;\\n    }\\n\\n    function createFun(\\n        string memory name,\\n        string memory symbol,\\n        string memory imageURI,\\n        IERC20 raisinToken,\\n        uint256 endsAt,\\n        uint256 maxSupply,\\n        uint256 raisinTarget\\n    ) public returns (FunFun) {\\n        FunFun fun = makeFun(\\n            raisinToken,\\n            endsAt,\\n            maxSupply,\\n            raisinTarget\\n            );\\n        FunToken funToken = deployFunToken(name, symbol, imageURI, maxSupply, fun);\\n\\n        fun.setFunToken(funToken);\\n\\n        return fun;\\n    }\\n\\n    function deployFunToken(\\n        string memory name,\\n        string memory symbol,\\n        string memory imageURI,\\n        uint256 maxSupply,\\n        FunFun campaign\\n    ) private returns (FunToken) {\\n        FunToken funToken = new FunToken(name, symbol, imageURI, maxSupply, campaign);\\n        require(address(funToken) != address(0), \\\"Failed to deploy FunToken\\\");\\n        \\n        return funToken;\\n    }\\n\\n    function makeFun(\\n        IERC20 raisinToken,\\n        uint256 endsAt,\\n        uint256 maxSupply,\\n        uint256 raisinTarget\\n    ) private returns (FunFun) {\\n        FunFun fun = new FunFun(\\n            raisinToken,\\n            endsAt,\\n            maxSupply,\\n            raisinTarget\\n        );\\n        require(address(fun) != address(0), \\\"Failed to deploy FunFun\\\");\\n        _funByMan[msg.sender].push(fun);\\n\\n        return fun;\\n    }\\n\\n    function getFunByMan(address funder) public view returns (FunFun[] memory) {\\n        return _funByMan[funder];\\n    }\\n}\\n\",\"keccak256\":\"0x3c19447f718d497b2f22ba237f1f240eaf60321f7402de2775ce48f5cfca8939\",\"license\":\"MIT\"},\"contracts/FunFun.sol\":{\"content\":\"import \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./FunToken.sol\\\";\\nimport \\\"./Curves/Polynomial.sol\\\";\\n\\n// The representation of the campaign as a bonding curve-based token\\ncontract FunFun is PolynomialCurve, Ownable {\\n    FunToken public funToken;\\n    IERC20 private immutable _raiseToken;\\n    uint256 public immutable maxSupply;\\n    uint256 public immutable endsAt;\\n    uint256 public immutable raiseTarget;\\n    mapping(address => uint256) private ledger;\\n\\n    /// @param raiseToken_ Token of the fundraising\\n    /// @param endsAt_ Timestamp at which the fundraiser ends\\n    /// @param maxSupply_ How much of Fun Token will be minted with reaching the end of the campaign\\n    /// @param raiseTarget_ How much we are raising of the raise token in the campaign\\n    constructor(\\n        IERC20 raiseToken_,\\n        uint256 endsAt_,\\n        uint256 maxSupply_,\\n        uint256 raiseTarget_\\n    ) PolynomialCurve(raiseTarget / (maxSupply^3/3)) {\\n        _raiseToken = raiseToken_;\\n        maxSupply = maxSupply_;\\n        maxSupply = raiseTarget_;\\n        endsAt = endsAt_;\\n    }\\n\\n    /// Investors buy the fundraiser's FunToken\\n    function buyFun(uint256 amount) public {\\n        require(address(funToken) != address(0), \\\"FunToken not set\\\");\\n        require(amount != 0, \\\"Require non-zero amount\\\");\\n\\n        uint256 raiseTokenAmount = priceForSupply(funToken.totalSupply() + amount) - priceForSupply(funToken.totalSupply());\\n        ledger[msg.sender] += raiseTokenAmount;\\n        _raiseToken.transferFrom(msg.sender, address(this), raiseTokenAmount);\\n        funToken.mint(msg.sender, amount);\\n\\n        if (funToken.totalSupply() == maxSupply) {\\n            finishCampaign();\\n        }\\n    }\\n\\n    /// Sell all the fun tokens in case the campaign fail to meet the criteria\\n    function sellFun() public {\\n        require(address(funToken) != address(0), \\\"FunToken not set\\\");\\n        require(block.timestamp >= endsAt, \\\"Campaign not finished\\\");\\n\\n        uint256 addressAmount = funToken.balanceOf(msg.sender);\\n        require(addressAmount != 0, \\\"No FunToken balance\\\");\\n        _raiseToken.transfer(msg.sender, ledger[msg.sender]);\\n        funToken.burnFrom(msg.sender, addressAmount);\\n    }\\n\\n    function finishCampaign() private {\\n        require(funToken.totalSupply() == maxSupply, \\\"Campaign not finished\\\");\\n        funToken.unlock();\\n\\n        // TODO: Setup Uniswap pool\\n    }\\n\\n    /// Used to set FunToken, can be called only once\\n    function setFunToken(FunToken token) public onlyOwner {\\n        funToken = token;\\n        renounceOwnership();\\n    }\\n\\n    /// @return How much the sender already contributed to the campaign\\n    function paidAmount() public view returns (uint256){\\n        return ledger[msg.sender];\\n    }\\n}\\n\",\"keccak256\":\"0xe2f0849c22788f1262f6eb994280103f36c5ae0c7b3c74a174121f4d43610480\"},\"contracts/FunToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"./FunFun.sol\\\";\\n\\n\\n/// Tokens that are bought in the funraising campains.\\ncontract FunToken is ERC20, Ownable {\\n    bool private _locked;\\n    uint256 private _maxSupply;\\n    string private _imageURI;\\n\\n    constructor(\\n        string memory name,\\n        string memory symbol,\\n        string memory imageURI,\\n        uint256 maxSupply,\\n        FunFun campaign\\n        ) ERC20(name, symbol) {\\n        _locked = true;\\n        _maxSupply = maxSupply;\\n        _imageURI = imageURI;\\n\\n        transferOwnership(address(campaign));\\n    }\\n\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        require(!_locked, \\\"FunToken: token is locked\\\");\\n\\n        _transfer(_msgSender(), to, amount);\\n\\n        return true;\\n    }\\n\\n    function mint(address to, uint256 amount) public onlyOwner returns (bool){\\n        require(totalSupply() + amount <= _maxSupply, \\\"FunToken: max supply exceeded\\\");\\n\\n        _mint(to, amount);\\n\\n        return true;\\n    }\\n\\n    function burnFrom(address account, uint256 amount) public {\\n        _burn(account, amount);\\n    }\\n\\n    function locked() public view returns (bool) {\\n        return _locked;\\n    }\\n\\n    function unlock() public onlyOwner {\\n        _locked = false;\\n    }\\n\\n    function maxSupply() public view returns (uint256) {\\n        return _maxSupply;\\n    }\\n}\\n\",\"keccak256\":\"0x17ddab69755f2bee579c2ec123e8ad8f878bef134fc60d752b392b21839926d0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161293b38038061293b83398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b6128a8806100936000396000f3fe60806040523480156200001157600080fd5b50600436106200003a5760003560e01c80636e211588146200003f578063fff4c403146200006e575b600080fd5b6200005662000050366004620003aa565b6200009e565b604051620000659190620003d1565b60405180910390f35b620000856200007f366004620004e4565b62000116565b6040516001600160a01b03909116815260200162000065565b6001600160a01b0381166000908152600160209081526040918290208054835181840281018401909452808452606093928301828280156200010a57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311620000eb575b50505050509050919050565b6000806200012786868686620001c2565b905060006200013a8a8a8a8886620002cd565b6040517fe8cbe6a90000000000000000000000000000000000000000000000000000000081526001600160a01b0380831660048301529192509083169063e8cbe6a990602401600060405180830381600087803b1580156200019b57600080fd5b505af1158015620001b0573d6000803e3d6000fd5b50939c9b505050505050505050505050565b60008085858585604051620001d79062000375565b6001600160a01b039094168452602084019290925260408301526060820152608001604051809103906000f08015801562000216573d6000803e3d6000fd5b5090506001600160a01b038116620002755760405162461bcd60e51b815260206004820152601760248201527f4661696c656420746f206465706c6f792046756e46756e00000000000000000060448201526064015b60405180910390fd5b33600090815260016020818152604083208054928301815583529091200180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03831617905595945050505050565b6000808686868686604051620002e39062000383565b620002f3959493929190620005ee565b604051809103906000f08015801562000310573d6000803e3d6000fd5b5090506001600160a01b0381166200036b5760405162461bcd60e51b815260206004820152601960248201527f4661696c656420746f206465706c6f792046756e546f6b656e0000000000000060448201526064016200026c565b9695505050505050565b610e4f806200065083390190565b6113d4806200149f83390190565b6001600160a01b0381168114620003a757600080fd5b50565b600060208284031215620003bd57600080fd5b8135620003ca8162000391565b9392505050565b6020808252825182820181905260009190848201906040850190845b81811015620004145783516001600160a01b031683529284019291840191600101620003ed565b50909695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600082601f8301126200046157600080fd5b813567ffffffffffffffff808211156200047f576200047f62000420565b604051601f8301601f19908116603f01168101908282118183101715620004aa57620004aa62000420565b81604052838152866020858801011115620004c457600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080600080600080600060e0888a0312156200050057600080fd5b873567ffffffffffffffff808211156200051957600080fd5b620005278b838c016200044f565b985060208a01359150808211156200053e57600080fd5b6200054c8b838c016200044f565b975060408a01359150808211156200056357600080fd5b50620005728a828b016200044f565b9550506060880135620005858162000391565b9699959850939660808101359560a0820135955060c0909101359350915050565b6000815180845260005b81811015620005ce57602081850181015186830182015201620005b0565b506000602082860101526020601f19601f83011685010191505092915050565b60a0815260006200060360a0830188620005a6565b8281036020840152620006178188620005a6565b905082810360408401526200062d8187620005a6565b9150508360608301526001600160a01b0383166080830152969550505050505056fe61010060405234801561001157600080fd5b50604051610e4f380380610e4f833981016040819052610030916100be565b60a05160011860e0516100439190610109565b60005561004f3361006c565b6001600160a01b039093166080525060a09190915260c05261012b565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600080600080608085870312156100d457600080fd5b84516001600160a01b03811681146100eb57600080fd5b60208601516040870151606090970151919890975090945092505050565b60008261012657634e487b7160e01b600052601260045260246000fd5b500490565b60805160a05160c05160e051610cd061017f600039600061016a01526000818160de01526102830152600081816101b5015281816108360152610a6c01526000818161040f015261071c0152610cd06000f3fe608060405234801561001057600080fd5b50600436106100d45760003560e01c80638da5cb5b11610081578063e8cbe6a91161005b578063e8cbe6a9146101d7578063f2fde38b146101ea578063f9988213146101fd57600080fd5b80638da5cb5b1461018c5780638e02b8fb1461019d578063d5abeb01146101b057600080fd5b80637ca3771a116100b25780637ca3771a14610132578063845380a21461013a578063851319761461016557600080fd5b80630a09284a146100d957806312fa769f14610113578063715018a614610128575b600080fd5b6101007f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020015b60405180910390f35b33600090815260036020526040902054610100565b610130610210565b005b610130610224565b60025461014d906001600160a01b031681565b6040516001600160a01b03909116815260200161010a565b6101007f000000000000000000000000000000000000000000000000000000000000000081565b6001546001600160a01b031661014d565b6101306101ab366004610b9b565b610505565b6101007f000000000000000000000000000000000000000000000000000000000000000081565b6101306101e5366004610bc9565b6108bf565b6101306101f8366004610bc9565b6108fa565b61010061020b366004610b9b565b610987565b61021861099e565b61022260006109f8565b565b6002546001600160a01b03166102815760405162461bcd60e51b815260206004820152601060248201527f46756e546f6b656e206e6f74207365740000000000000000000000000000000060448201526064015b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000004210156102f15760405162461bcd60e51b815260206004820152601560248201527f43616d706169676e206e6f742066696e697368656400000000000000000000006044820152606401610278565b6002546040517f70a082310000000000000000000000000000000000000000000000000000000081523360048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015610353573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103779190610bed565b9050806000036103c95760405162461bcd60e51b815260206004820152601360248201527f4e6f2046756e546f6b656e2062616c616e6365000000000000000000000000006044820152606401610278565b33600081815260036020526040908190205490517fa9059cbb000000000000000000000000000000000000000000000000000000008152600481019290925260248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a9059cbb906044016020604051808303816000875af1158015610460573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104849190610c06565b506002546040517f79cc6790000000000000000000000000000000000000000000000000000000008152336004820152602481018390526001600160a01b03909116906379cc679090604401600060405180830381600087803b1580156104ea57600080fd5b505af11580156104fe573d6000803e3d6000fd5b5050505050565b6002546001600160a01b031661055d5760405162461bcd60e51b815260206004820152601060248201527f46756e546f6b656e206e6f7420736574000000000000000000000000000000006044820152606401610278565b806000036105ad5760405162461bcd60e51b815260206004820152601760248201527f52657175697265206e6f6e2d7a65726f20616d6f756e740000000000000000006044820152606401610278565b6000610629600260009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610605573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061020b9190610bed565b6106ae83600260009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610680573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a49190610bed565b61020b9190610c57565b6106b89190610c70565b336000908152600360205260408120805492935083929091906106dc908490610c57565b90915550506040517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd906064016020604051808303816000875af115801561076d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107919190610c06565b506002546040517f40c10f19000000000000000000000000000000000000000000000000000000008152336004820152602481018490526001600160a01b03909116906340c10f19906044016020604051808303816000875af11580156107fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108209190610c06565b50600254604080516318160ddd60e01b815290517f0000000000000000000000000000000000000000000000000000000000000000926001600160a01b0316916318160ddd9160048083019260209291908290030181865afa15801561088a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ae9190610bed565b036108bb576108bb610a57565b5050565b6108c761099e565b6002805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383161790556108f7610210565b50565b61090261099e565b6001600160a01b03811661097e5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610278565b6108f7816109f8565b60008054610996906002610c83565b909118919050565b6001546001600160a01b031633146102225760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610278565b600180546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600254604080516318160ddd60e01b815290517f0000000000000000000000000000000000000000000000000000000000000000926001600160a01b0316916318160ddd9160048083019260209291908290030181865afa158015610ac0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae49190610bed565b14610b315760405162461bcd60e51b815260206004820152601560248201527f43616d706169676e206e6f742066696e697368656400000000000000000000006044820152606401610278565b600260009054906101000a90046001600160a01b03166001600160a01b031663a69df4b56040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610b8157600080fd5b505af1158015610b95573d6000803e3d6000fd5b50505050565b600060208284031215610bad57600080fd5b5035919050565b6001600160a01b03811681146108f757600080fd5b600060208284031215610bdb57600080fd5b8135610be681610bb4565b9392505050565b600060208284031215610bff57600080fd5b5051919050565b600060208284031215610c1857600080fd5b81518015158114610be657600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b80820180821115610c6a57610c6a610c28565b92915050565b81810381811115610c6a57610c6a610c28565b8082028115828204841417610c6a57610c6a610c2856fea264697066735822122040c296a2a073eeb55ebcf0134d406f7a292fcd16222554637a07c69553f1d04464736f6c6343000817003360806040523480156200001157600080fd5b50604051620013d4380380620013d48339810160408190526200003491620002ac565b84846003620000448382620003fc565b506004620000538282620003fc565b505050620000706200006a620000ad60201b60201c565b620000b1565b6005805460ff60a01b1916600160a01b17905560068290556007620000968482620003fc565b50620000a28162000103565b5050505050620004c8565b3390565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6200010d62000186565b6001600160a01b038116620001785760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b6200018381620000b1565b50565b6005546001600160a01b03163314620001e25760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016200016f565b565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200020c57600080fd5b81516001600160401b0380821115620002295762000229620001e4565b604051601f8301601f19908116603f01168101908282118183101715620002545762000254620001e4565b81604052838152602092508660208588010111156200027257600080fd5b600091505b8382101562000296578582018301518183018401529082019062000277565b6000602085830101528094505050505092915050565b600080600080600060a08688031215620002c557600080fd5b85516001600160401b0380821115620002dd57600080fd5b620002eb89838a01620001fa565b965060208801519150808211156200030257600080fd5b6200031089838a01620001fa565b955060408801519150808211156200032757600080fd5b506200033688828901620001fa565b60608801516080890151919550935090506001600160a01b03811681146200035d57600080fd5b809150509295509295909350565b600181811c908216806200038057607f821691505b602082108103620003a157634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620003f7576000816000526020600020601f850160051c81016020861015620003d25750805b601f850160051c820191505b81811015620003f357828155600101620003de565b5050505b505050565b81516001600160401b03811115620004185762000418620001e4565b62000430816200042984546200036b565b84620003a7565b602080601f8311600181146200046857600084156200044f5750858301515b600019600386901b1c1916600185901b178555620003f3565b600085815260208120601f198616915b82811015620004995788860151825594840194600190910190840162000478565b5085821015620004b85787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b610efc80620004d86000396000f3fe608060405234801561001057600080fd5b50600436106101515760003560e01c806379cc6790116100cd578063a9059cbb11610081578063d5abeb0111610066578063d5abeb011461029a578063dd62ed3e146102a2578063f2fde38b146102db57600080fd5b8063a9059cbb14610275578063cf3090121461028857600080fd5b806395d89b41116100b257806395d89b4114610252578063a457c2d71461025a578063a69df4b51461026d57600080fd5b806379cc6790146102245780638da5cb5b1461023757600080fd5b8063313ce5671161012457806340c10f191161010957806340c10f19146101de57806370a08231146101f1578063715018a61461021a57600080fd5b8063313ce567146101bc57806339509351146101cb57600080fd5b806306fdde0314610156578063095ea7b31461017457806318160ddd1461019757806323b872dd146101a9575b600080fd5b61015e6102ee565b60405161016b9190610d45565b60405180910390f35b610187610182366004610db0565b610380565b604051901515815260200161016b565b6002545b60405190815260200161016b565b6101876101b7366004610dda565b61039a565b6040516012815260200161016b565b6101876101d9366004610db0565b6103be565b6101876101ec366004610db0565b6103fd565b61019b6101ff366004610e16565b6001600160a01b031660009081526020819052604090205490565b610222610484565b005b610222610232366004610db0565b610498565b6005546040516001600160a01b03909116815260200161016b565b61015e6104a6565b610187610268366004610db0565b6104b5565b61022261055f565b610187610283366004610db0565b610591565b600554600160a01b900460ff16610187565b60065461019b565b61019b6102b0366004610e38565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6102226102e9366004610e16565b6105f9565b6060600380546102fd90610e6b565b80601f016020809104026020016040519081016040528092919081815260200182805461032990610e6b565b80156103765780601f1061034b57610100808354040283529160200191610376565b820191906000526020600020905b81548152906001019060200180831161035957829003601f168201915b5050505050905090565b60003361038e818585610689565b60019150505b92915050565b6000336103a88582856107e2565b6103b3858585610874565b506001949350505050565b3360008181526001602090815260408083206001600160a01b038716845290915281205490919061038e90829086906103f8908790610ea5565b610689565b6000610407610a61565b6006548261041460025490565b61041e9190610ea5565b11156104715760405162461bcd60e51b815260206004820152601d60248201527f46756e546f6b656e3a206d617820737570706c7920657863656564656400000060448201526064015b60405180910390fd5b61047b8383610abb565b50600192915050565b61048c610a61565b6104966000610b7a565b565b6104a28282610be4565b5050565b6060600480546102fd90610e6b565b3360008181526001602090815260408083206001600160a01b0387168452909152812054909190838110156105525760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f0000000000000000000000000000000000000000000000000000006064820152608401610468565b6103b38286868403610689565b610567610a61565b600580547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff169055565b600554600090600160a01b900460ff16156105ee5760405162461bcd60e51b815260206004820152601960248201527f46756e546f6b656e3a20746f6b656e206973206c6f636b6564000000000000006044820152606401610468565b61047b338484610874565b610601610a61565b6001600160a01b03811661067d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610468565b61068681610b7a565b50565b6001600160a01b0383166107045760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610468565b6001600160a01b0382166107805760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f73730000000000000000000000000000000000000000000000000000000000006064820152608401610468565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b03838116600090815260016020908152604080832093861683529290522054600019811461086e57818110156108615760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610468565b61086e8484848403610689565b50505050565b6001600160a01b0383166108f05760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f64726573730000000000000000000000000000000000000000000000000000006064820152608401610468565b6001600160a01b03821661096c5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f65737300000000000000000000000000000000000000000000000000000000006064820152608401610468565b6001600160a01b038316600090815260208190526040902054818110156109fb5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e636500000000000000000000000000000000000000000000000000006064820152608401610468565b6001600160a01b03848116600081815260208181526040808320878703905593871680835291849020805487019055925185815290927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a361086e565b6005546001600160a01b031633146104965760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610468565b6001600160a01b038216610b115760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610468565b8060026000828254610b239190610ea5565b90915550506001600160a01b038216600081815260208181526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b600580546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b038216610c605760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360448201527f73000000000000000000000000000000000000000000000000000000000000006064820152608401610468565b6001600160a01b03821660009081526020819052604090205481811015610cef5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60448201527f63650000000000000000000000000000000000000000000000000000000000006064820152608401610468565b6001600160a01b0383166000818152602081815260408083208686039055600280548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91016107d5565b60006020808352835180602085015260005b81811015610d7357858101830151858201604001528201610d57565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b0381168114610dab57600080fd5b919050565b60008060408385031215610dc357600080fd5b610dcc83610d94565b946020939093013593505050565b600080600060608486031215610def57600080fd5b610df884610d94565b9250610e0660208501610d94565b9150604084013590509250925092565b600060208284031215610e2857600080fd5b610e3182610d94565b9392505050565b60008060408385031215610e4b57600080fd5b610e5483610d94565b9150610e6260208401610d94565b90509250929050565b600181811c90821680610e7f57607f821691505b602082108103610e9f57634e487b7160e01b600052602260045260246000fd5b50919050565b8082018082111561039457634e487b7160e01b600052601160045260246000fdfea26469706673582212208464cc625441b0d10c89aed94114eb68692dce5efe3ac56295c94b81f09848b764736f6c63430008170033a26469706673582212204ae02312a3df14514eaad41ac931800e7d3b2f37cfe0fc77cd0b53ea8c8a1caf64736f6c63430008170033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b50600436106200003a5760003560e01c80636e211588146200003f578063fff4c403146200006e575b600080fd5b6200005662000050366004620003aa565b6200009e565b604051620000659190620003d1565b60405180910390f35b620000856200007f366004620004e4565b62000116565b6040516001600160a01b03909116815260200162000065565b6001600160a01b0381166000908152600160209081526040918290208054835181840281018401909452808452606093928301828280156200010a57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311620000eb575b50505050509050919050565b6000806200012786868686620001c2565b905060006200013a8a8a8a8886620002cd565b6040517fe8cbe6a90000000000000000000000000000000000000000000000000000000081526001600160a01b0380831660048301529192509083169063e8cbe6a990602401600060405180830381600087803b1580156200019b57600080fd5b505af1158015620001b0573d6000803e3d6000fd5b50939c9b505050505050505050505050565b60008085858585604051620001d79062000375565b6001600160a01b039094168452602084019290925260408301526060820152608001604051809103906000f08015801562000216573d6000803e3d6000fd5b5090506001600160a01b038116620002755760405162461bcd60e51b815260206004820152601760248201527f4661696c656420746f206465706c6f792046756e46756e00000000000000000060448201526064015b60405180910390fd5b33600090815260016020818152604083208054928301815583529091200180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03831617905595945050505050565b6000808686868686604051620002e39062000383565b620002f3959493929190620005ee565b604051809103906000f08015801562000310573d6000803e3d6000fd5b5090506001600160a01b0381166200036b5760405162461bcd60e51b815260206004820152601960248201527f4661696c656420746f206465706c6f792046756e546f6b656e0000000000000060448201526064016200026c565b9695505050505050565b610e4f806200065083390190565b6113d4806200149f83390190565b6001600160a01b0381168114620003a757600080fd5b50565b600060208284031215620003bd57600080fd5b8135620003ca8162000391565b9392505050565b6020808252825182820181905260009190848201906040850190845b81811015620004145783516001600160a01b031683529284019291840191600101620003ed565b50909695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600082601f8301126200046157600080fd5b813567ffffffffffffffff808211156200047f576200047f62000420565b604051601f8301601f19908116603f01168101908282118183101715620004aa57620004aa62000420565b81604052838152866020858801011115620004c457600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080600080600080600060e0888a0312156200050057600080fd5b873567ffffffffffffffff808211156200051957600080fd5b620005278b838c016200044f565b985060208a01359150808211156200053e57600080fd5b6200054c8b838c016200044f565b975060408a01359150808211156200056357600080fd5b50620005728a828b016200044f565b9550506060880135620005858162000391565b9699959850939660808101359560a0820135955060c0909101359350915050565b6000815180845260005b81811015620005ce57602081850181015186830182015201620005b0565b506000602082860101526020601f19601f83011685010191505092915050565b60a0815260006200060360a0830188620005a6565b8281036020840152620006178188620005a6565b905082810360408401526200062d8187620005a6565b9150508360608301526001600160a01b0383166080830152969550505050505056fe61010060405234801561001157600080fd5b50604051610e4f380380610e4f833981016040819052610030916100be565b60a05160011860e0516100439190610109565b60005561004f3361006c565b6001600160a01b039093166080525060a09190915260c05261012b565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600080600080608085870312156100d457600080fd5b84516001600160a01b03811681146100eb57600080fd5b60208601516040870151606090970151919890975090945092505050565b60008261012657634e487b7160e01b600052601260045260246000fd5b500490565b60805160a05160c05160e051610cd061017f600039600061016a01526000818160de01526102830152600081816101b5015281816108360152610a6c01526000818161040f015261071c0152610cd06000f3fe608060405234801561001057600080fd5b50600436106100d45760003560e01c80638da5cb5b11610081578063e8cbe6a91161005b578063e8cbe6a9146101d7578063f2fde38b146101ea578063f9988213146101fd57600080fd5b80638da5cb5b1461018c5780638e02b8fb1461019d578063d5abeb01146101b057600080fd5b80637ca3771a116100b25780637ca3771a14610132578063845380a21461013a578063851319761461016557600080fd5b80630a09284a146100d957806312fa769f14610113578063715018a614610128575b600080fd5b6101007f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020015b60405180910390f35b33600090815260036020526040902054610100565b610130610210565b005b610130610224565b60025461014d906001600160a01b031681565b6040516001600160a01b03909116815260200161010a565b6101007f000000000000000000000000000000000000000000000000000000000000000081565b6001546001600160a01b031661014d565b6101306101ab366004610b9b565b610505565b6101007f000000000000000000000000000000000000000000000000000000000000000081565b6101306101e5366004610bc9565b6108bf565b6101306101f8366004610bc9565b6108fa565b61010061020b366004610b9b565b610987565b61021861099e565b61022260006109f8565b565b6002546001600160a01b03166102815760405162461bcd60e51b815260206004820152601060248201527f46756e546f6b656e206e6f74207365740000000000000000000000000000000060448201526064015b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000004210156102f15760405162461bcd60e51b815260206004820152601560248201527f43616d706169676e206e6f742066696e697368656400000000000000000000006044820152606401610278565b6002546040517f70a082310000000000000000000000000000000000000000000000000000000081523360048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015610353573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103779190610bed565b9050806000036103c95760405162461bcd60e51b815260206004820152601360248201527f4e6f2046756e546f6b656e2062616c616e6365000000000000000000000000006044820152606401610278565b33600081815260036020526040908190205490517fa9059cbb000000000000000000000000000000000000000000000000000000008152600481019290925260248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a9059cbb906044016020604051808303816000875af1158015610460573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104849190610c06565b506002546040517f79cc6790000000000000000000000000000000000000000000000000000000008152336004820152602481018390526001600160a01b03909116906379cc679090604401600060405180830381600087803b1580156104ea57600080fd5b505af11580156104fe573d6000803e3d6000fd5b5050505050565b6002546001600160a01b031661055d5760405162461bcd60e51b815260206004820152601060248201527f46756e546f6b656e206e6f7420736574000000000000000000000000000000006044820152606401610278565b806000036105ad5760405162461bcd60e51b815260206004820152601760248201527f52657175697265206e6f6e2d7a65726f20616d6f756e740000000000000000006044820152606401610278565b6000610629600260009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610605573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061020b9190610bed565b6106ae83600260009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610680573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a49190610bed565b61020b9190610c57565b6106b89190610c70565b336000908152600360205260408120805492935083929091906106dc908490610c57565b90915550506040517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd906064016020604051808303816000875af115801561076d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107919190610c06565b506002546040517f40c10f19000000000000000000000000000000000000000000000000000000008152336004820152602481018490526001600160a01b03909116906340c10f19906044016020604051808303816000875af11580156107fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108209190610c06565b50600254604080516318160ddd60e01b815290517f0000000000000000000000000000000000000000000000000000000000000000926001600160a01b0316916318160ddd9160048083019260209291908290030181865afa15801561088a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ae9190610bed565b036108bb576108bb610a57565b5050565b6108c761099e565b6002805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383161790556108f7610210565b50565b61090261099e565b6001600160a01b03811661097e5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610278565b6108f7816109f8565b60008054610996906002610c83565b909118919050565b6001546001600160a01b031633146102225760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610278565b600180546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600254604080516318160ddd60e01b815290517f0000000000000000000000000000000000000000000000000000000000000000926001600160a01b0316916318160ddd9160048083019260209291908290030181865afa158015610ac0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae49190610bed565b14610b315760405162461bcd60e51b815260206004820152601560248201527f43616d706169676e206e6f742066696e697368656400000000000000000000006044820152606401610278565b600260009054906101000a90046001600160a01b03166001600160a01b031663a69df4b56040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610b8157600080fd5b505af1158015610b95573d6000803e3d6000fd5b50505050565b600060208284031215610bad57600080fd5b5035919050565b6001600160a01b03811681146108f757600080fd5b600060208284031215610bdb57600080fd5b8135610be681610bb4565b9392505050565b600060208284031215610bff57600080fd5b5051919050565b600060208284031215610c1857600080fd5b81518015158114610be657600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b80820180821115610c6a57610c6a610c28565b92915050565b81810381811115610c6a57610c6a610c28565b8082028115828204841417610c6a57610c6a610c2856fea264697066735822122040c296a2a073eeb55ebcf0134d406f7a292fcd16222554637a07c69553f1d04464736f6c6343000817003360806040523480156200001157600080fd5b50604051620013d4380380620013d48339810160408190526200003491620002ac565b84846003620000448382620003fc565b506004620000538282620003fc565b505050620000706200006a620000ad60201b60201c565b620000b1565b6005805460ff60a01b1916600160a01b17905560068290556007620000968482620003fc565b50620000a28162000103565b5050505050620004c8565b3390565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6200010d62000186565b6001600160a01b038116620001785760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b6200018381620000b1565b50565b6005546001600160a01b03163314620001e25760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016200016f565b565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200020c57600080fd5b81516001600160401b0380821115620002295762000229620001e4565b604051601f8301601f19908116603f01168101908282118183101715620002545762000254620001e4565b81604052838152602092508660208588010111156200027257600080fd5b600091505b8382101562000296578582018301518183018401529082019062000277565b6000602085830101528094505050505092915050565b600080600080600060a08688031215620002c557600080fd5b85516001600160401b0380821115620002dd57600080fd5b620002eb89838a01620001fa565b965060208801519150808211156200030257600080fd5b6200031089838a01620001fa565b955060408801519150808211156200032757600080fd5b506200033688828901620001fa565b60608801516080890151919550935090506001600160a01b03811681146200035d57600080fd5b809150509295509295909350565b600181811c908216806200038057607f821691505b602082108103620003a157634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620003f7576000816000526020600020601f850160051c81016020861015620003d25750805b601f850160051c820191505b81811015620003f357828155600101620003de565b5050505b505050565b81516001600160401b03811115620004185762000418620001e4565b62000430816200042984546200036b565b84620003a7565b602080601f8311600181146200046857600084156200044f5750858301515b600019600386901b1c1916600185901b178555620003f3565b600085815260208120601f198616915b82811015620004995788860151825594840194600190910190840162000478565b5085821015620004b85787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b610efc80620004d86000396000f3fe608060405234801561001057600080fd5b50600436106101515760003560e01c806379cc6790116100cd578063a9059cbb11610081578063d5abeb0111610066578063d5abeb011461029a578063dd62ed3e146102a2578063f2fde38b146102db57600080fd5b8063a9059cbb14610275578063cf3090121461028857600080fd5b806395d89b41116100b257806395d89b4114610252578063a457c2d71461025a578063a69df4b51461026d57600080fd5b806379cc6790146102245780638da5cb5b1461023757600080fd5b8063313ce5671161012457806340c10f191161010957806340c10f19146101de57806370a08231146101f1578063715018a61461021a57600080fd5b8063313ce567146101bc57806339509351146101cb57600080fd5b806306fdde0314610156578063095ea7b31461017457806318160ddd1461019757806323b872dd146101a9575b600080fd5b61015e6102ee565b60405161016b9190610d45565b60405180910390f35b610187610182366004610db0565b610380565b604051901515815260200161016b565b6002545b60405190815260200161016b565b6101876101b7366004610dda565b61039a565b6040516012815260200161016b565b6101876101d9366004610db0565b6103be565b6101876101ec366004610db0565b6103fd565b61019b6101ff366004610e16565b6001600160a01b031660009081526020819052604090205490565b610222610484565b005b610222610232366004610db0565b610498565b6005546040516001600160a01b03909116815260200161016b565b61015e6104a6565b610187610268366004610db0565b6104b5565b61022261055f565b610187610283366004610db0565b610591565b600554600160a01b900460ff16610187565b60065461019b565b61019b6102b0366004610e38565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6102226102e9366004610e16565b6105f9565b6060600380546102fd90610e6b565b80601f016020809104026020016040519081016040528092919081815260200182805461032990610e6b565b80156103765780601f1061034b57610100808354040283529160200191610376565b820191906000526020600020905b81548152906001019060200180831161035957829003601f168201915b5050505050905090565b60003361038e818585610689565b60019150505b92915050565b6000336103a88582856107e2565b6103b3858585610874565b506001949350505050565b3360008181526001602090815260408083206001600160a01b038716845290915281205490919061038e90829086906103f8908790610ea5565b610689565b6000610407610a61565b6006548261041460025490565b61041e9190610ea5565b11156104715760405162461bcd60e51b815260206004820152601d60248201527f46756e546f6b656e3a206d617820737570706c7920657863656564656400000060448201526064015b60405180910390fd5b61047b8383610abb565b50600192915050565b61048c610a61565b6104966000610b7a565b565b6104a28282610be4565b5050565b6060600480546102fd90610e6b565b3360008181526001602090815260408083206001600160a01b0387168452909152812054909190838110156105525760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f0000000000000000000000000000000000000000000000000000006064820152608401610468565b6103b38286868403610689565b610567610a61565b600580547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff169055565b600554600090600160a01b900460ff16156105ee5760405162461bcd60e51b815260206004820152601960248201527f46756e546f6b656e3a20746f6b656e206973206c6f636b6564000000000000006044820152606401610468565b61047b338484610874565b610601610a61565b6001600160a01b03811661067d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610468565b61068681610b7a565b50565b6001600160a01b0383166107045760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610468565b6001600160a01b0382166107805760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f73730000000000000000000000000000000000000000000000000000000000006064820152608401610468565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b03838116600090815260016020908152604080832093861683529290522054600019811461086e57818110156108615760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610468565b61086e8484848403610689565b50505050565b6001600160a01b0383166108f05760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f64726573730000000000000000000000000000000000000000000000000000006064820152608401610468565b6001600160a01b03821661096c5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f65737300000000000000000000000000000000000000000000000000000000006064820152608401610468565b6001600160a01b038316600090815260208190526040902054818110156109fb5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e636500000000000000000000000000000000000000000000000000006064820152608401610468565b6001600160a01b03848116600081815260208181526040808320878703905593871680835291849020805487019055925185815290927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a361086e565b6005546001600160a01b031633146104965760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610468565b6001600160a01b038216610b115760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610468565b8060026000828254610b239190610ea5565b90915550506001600160a01b038216600081815260208181526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b600580546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b038216610c605760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360448201527f73000000000000000000000000000000000000000000000000000000000000006064820152608401610468565b6001600160a01b03821660009081526020819052604090205481811015610cef5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60448201527f63650000000000000000000000000000000000000000000000000000000000006064820152608401610468565b6001600160a01b0383166000818152602081815260408083208686039055600280548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91016107d5565b60006020808352835180602085015260005b81811015610d7357858101830151858201604001528201610d57565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b0381168114610dab57600080fd5b919050565b60008060408385031215610dc357600080fd5b610dcc83610d94565b946020939093013593505050565b600080600060608486031215610def57600080fd5b610df884610d94565b9250610e0660208501610d94565b9150604084013590509250925092565b600060208284031215610e2857600080fd5b610e3182610d94565b9392505050565b60008060408385031215610e4b57600080fd5b610e5483610d94565b9150610e6260208401610d94565b90509250929050565b600181811c90821680610e7f57607f821691505b602082108103610e9f57634e487b7160e01b600052602260045260246000fd5b50919050565b8082018082111561039457634e487b7160e01b600052601160045260246000fdfea26469706673582212208464cc625441b0d10c89aed94114eb68692dce5efe3ac56295c94b81f09848b764736f6c63430008170033a26469706673582212204ae02312a3df14514eaad41ac931800e7d3b2f37cfe0fc77cd0b53ea8c8a1caf64736f6c63430008170033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 859,
        "contract": "contracts/FunFactory.sol:FunFactory",
        "label": "_raisinToken",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IERC20)777"
      },
      {
        "astId": 865,
        "contract": "contracts/FunFactory.sol:FunFactory",
        "label": "_funByMan",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_array(t_contract(FunFun)1292)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_contract(FunFun)1292)dyn_storage": {
        "base": "t_contract(FunFun)1292",
        "encoding": "dynamic_array",
        "label": "contract FunFun[]",
        "numberOfBytes": "32"
      },
      "t_contract(FunFun)1292": {
        "encoding": "inplace",
        "label": "contract FunFun",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)777": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_contract(FunFun)1292)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => contract FunFun[])",
        "numberOfBytes": "32",
        "value": "t_array(t_contract(FunFun)1292)dyn_storage"
      }
    }
  }
}